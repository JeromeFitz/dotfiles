#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
BREWFILE_TYPE="Brewfile"
DOTFILES_ROOT=$(pwd -P)

set -e

while test $# -gt 0; do
  case "$1" in
    "-s"|"--slim")
      BREWFILE_TYPE="Brewfile-Slim"
      shift
      ;;
    *)
      echo "Invalid option: $1"
      exit
      ;;
  esac
  shift
done

PKG_NAME=$(node -pe "require('./package.json')['name']")
# @note(PKG) variable setting for outputs
if [[ ! -d ".git" ]] || test ! $(which yarn); then
  PKG_NAME="🎉️  $PKG_NAME"
  PKG_VERSION="x.y.z (init)"
else
  PKG_NAME="📦️  $PKG_NAME"
  PKG_VERSION="$(git fetch origin --tags -f -q && git describe --tags --abbrev=0 | sed 's/v//')"
fi

msg () {
  printf "\r  [ \033[00;34m$1\033[0m ] $2\n"
}

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m📛️\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f symlinks/gitconfig.private.symlink ]
  then
    msg 🛠️ "gitconfig"

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - 😺️ What is your GitHub username? 🐙️'
    read -e git_username
    user ' - 😸️ What is your GitHub author name? 🐙️'
    read -e git_authorname
    user ' - 😹️ What is your GitHub author email? 🐙️'
    read -e git_authoremail

    sed -e "s/USERNAME/$git_username/g" -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" $DOTFILES_ROOT/symlinks/gitconfig.private.symlink.example > $DOTFILES_ROOT/symlinks/gitconfig.private.symlink

    success "🛠️ gitconfig"
    msg 🛠️ "complete"
    info ""
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "🔥️ removed: $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "🚚️ moved: $dst -> ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "👻️ skipped: $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "🔗️ linked: $1 -> $2"
  fi
}

install_dotfiles () {
  msg 💽️ "dotfiles"

  local overwrite_all=false backup_all=false skip_all=false
  msg 💽️ "› 🖇️ symlinks"

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*' | sort)
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  #
  # vim.install.sh
  for f in {ftdetect,ftplugin}; do
    mkdir -p "$HOME/.vim/$f"
    for src in $(find -H "$DOTFILES_ROOT/symlinks/vim/$f" -maxdepth 2 -name '*.vim' | sort)
      do
        dst="$HOME/.vim/$f/$(basename "${src%.*}.vim")"
        link_file "$src" "$dst"
      done
  done

  success "› 🖇️  symlinks"
  success "💽️ dotfiles"
  msg 💽️ "complete"
  info ""
}

install_homebrew () {
  # If we're on a Mac, let's install and setup homebrew.
  if [ "$(uname -s)" == "Darwin" ]
  then
    msg 🍺️ "Homebrew"
    if source bin/dot -t $BREWFILE_TYPE | while read -r data; do info "$data"; done
    then
      success "› 🍻️ dependencies"
    else
      fail "› 🤮️ dependencies"
    fi
    success "🍺️ Homebrew"
    msg 🍺️ "complete"
    info ""
  fi
}

msg 🤓️ ""
msg 🤓️ "$PKG_NAME@$PKG_VERSION"
msg 🤓️ ""

setup_gitconfig
install_dotfiles
install_homebrew

msg 🏁️ ""
msg 🏁️ "$PKG_NAME@$PKG_VERSION"
msg 🏁️ ""
